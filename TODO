# First line metadata

Should include level colors, reference decal textures.


# General algorithm for start/stop mask attributes

	Pick an algorithm based on expected output
	
	Hash consumed mask coordinates to avoid duplication.
	Ensure minimal execution when single mask point is found.
	
	1. On-axis search; expect two coordinates to form a line.
		GR	Rails fixture uses linear
	2. Grid search smallest area; expect two coordinates to form a rectangle.
		- compute area for all possible points
		- sort points by area
		- traverse sorted points in linear order
			- if point contains expected mask, return point

# Additions / Changes
	- Fix color leaking on non-affected tiles.
	- Marble should look like it's made of glass (material properties)
	- Shadows

	TR	Change level 4 IN/OU teleport for trebuchet TR
	MI	miniature floor texture
	NS	non-sloped slope for visual illusions... how the hell is this gonna work?

## Pieces needed
	TU	tube model(s)
		Archway fixture for level 4
	EV	vacuum model
	EH	hammer animated model
	EB	bird animated model
	FL	checkered flag model (note: this is conflated with floating platform currently)
	RI	hydraulic ramp motor (RH too)

## Surface textures needed
	Some textures are yet to be defined. Need to decide how to represent and handle floor/wall decals.
	
	SD	sand texture
	OI	oil texture animation
	BI	bump-mapping (BH too)

## Behaviors needed
	EM	marble opponent pushes and attracted to player within proximity
	EY	yum should walk, look around, identify player within proximity and attempt to consume from above
	MI	when in minature mode, EM/EY/EA can be squashed
	EB	materialize from origin and fly in a straight line
	EV	vacuum appears when in proximity, pulls player, disappears after a delay when distant
	EP	pre-defined piston patterns in rhythm launch and repel player

